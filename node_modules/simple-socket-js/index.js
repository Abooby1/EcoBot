let SimpleSocket={},SimpleSocketAPI={SocketURL:"wss://exotek.co:32560/simplesocket/socket",Operations:{},TotalMessages:0,ConnectSocket:function(){let e=require("websocket").w3cwebsocket;SimpleSocketAPI.Socket=new e(SimpleSocketAPI.SocketURL+"?en=etf","echo-protocol"),SimpleSocketAPI.Socket.binaryType="arraybuffer"},Debug:function(e,t,o){(1==SimpleSocket.debug||t)&&(1==SimpleSocket.debugStyle?1==o?console.error("%cSimpleSocket%c "+e,"color: #4F61FF; font-family: Didot, sans-serif; font-weight: 900; font-size: 14px;","color: white"):console.log("%cSimpleSocket%c "+e,"color: #4F61FF; font-family: Didot, sans-serif; font-weight: 900; font-size: 14px;","color: white"):1==o?console.error(e):console.log(e))},TryConnection:async function(){return await new Promise((async function(e,t){function o(){SimpleSocketAPI.Debug("CONNECTING"),SimpleSocketAPI.ConnectSocket(),SimpleSocketAPI.Socket.onopen=function(t){SimpleSocketAPI.Socket.onmessage=function(t){SimpleSocketAPI.Message(t.data),null!=SimpleSocketAPI.IntervalConnection&&(clearInterval(SimpleSocketAPI.IntervalConnection),SimpleSocketAPI.IntervalConnection=null,SimpleSocketAPI.Open(t.data),e(!0))},SimpleSocketAPI.Socket.onclose=function(){SimpleSocketAPI.Close(),1!=SimpleSocketAPI.ExpectClose&&SimpleSocketAPI.TryConnection()},SimpleSocketAPI.SendData("Connect",{Type:"Server",ID:SimpleSocketAPI.ID,Token:SimpleSocketAPI.Token})}}clearInterval(SimpleSocketAPI.IntervalConnection),SimpleSocketAPI.IntervalConnection=setInterval(o,1e4),o()}))},SendData:function(e,t,o,n){if(SimpleSocketAPI.TotalMessages+=1,SimpleSocketAPI.TotalMessages>9999&&(SimpleSocketAPI.TotalMessages=0),null==t.O&&(t.O=e+"_"+Date.now()+"_"+SimpleSocketAPI.TotalMessages),"Connect"!=e&&(1!=n||null!=o)){let n={OP:t.O,Task:e,Data:t};if("Subscribe"==e&&null!=t.Ftr){let e=t.Ftr;"object"==typeof t.Ftr&&(e=JSON.stringify(e)),null!=t.Con&&(e+=JSON.stringify(t.Con)),n.Hash=SimpleSocketAPI.Hash(e)}null!=o&&(n.Callback=o),SimpleSocketAPI.Operations[t.O]=n}let l=JSON.stringify(t);return null==SimpleSocketAPI.Socket||1!=SimpleSocketAPI.Socket.readyState||null==SimpleSocket.ClientID&&"Connect"!=e||(SimpleSocketAPI.Debug("DATA SENT: "+l),SimpleSocketAPI.Socket.send(new TextEncoder("utf-8").encode(l)),null==o&&null!=SimpleSocketAPI.Operations[t.O]&&delete SimpleSocketAPI.Operations[t.O]),t.O},Open:function(e){SimpleSocketAPI.Debug("CONNECTED"),"object"==typeof e&&(e=new TextDecoder("utf-8").decode(e));let t=JSON.parse(e);SimpleSocket.ClientID=t.ClientID,SimpleSocket.ServerID=t.ServerID,null!=SimpleSocket.onopen&&SimpleSocket.onopen(),null!=SimpleSocket.onfirstopen&&SimpleSocket.onfirstopen(),null!=SimpleSocketAPI.DefaultConfig&&SimpleSocketAPI.SendData("DefaultConfig",SimpleSocketAPI.DefaultConfig),null!=SimpleSocketAPI.DisconnectEvent&&SimpleSocketAPI.SendData("DisPub",SimpleSocketAPI.DisconnectEvent);let o=Object.keys(SimpleSocketAPI.Operations);for(let e=0;e<o.length;e++){let t={...SimpleSocketAPI.Operations[o[e]]};delete SimpleSocketAPI.Operations[o[e]],SimpleSocketAPI.SendData(t.Task,t.Data,t.Callback,!0)}},RemoveSub:function(e){null!=SimpleSocketAPI.Operations[e]&&delete SimpleSocketAPI.Operations[e]},Message:function(e){"object"==typeof e&&(e=new TextDecoder("utf-8").decode(e));let t=JSON.parse(e),o="";if(null!=t.O){let e=SimpleSocketAPI.Operations[t.O];if(null!=e){let n=Date.now()-e[0];o=" | TOOK: "+n+" MS",SimpleSocket.socketLatancy=n,null!=e[2]&&e[2](t.D),delete e}}null!=t.CF&&SimpleSocketAPI[t.CF](t.P),1==t.Close&&(SimpleSocketAPI.ExpectClose=!0),SimpleSocketAPI.Debug("DATA RECIEVED: "+e+o),null!=t.E&&(SimpleSocketAPI.RemoveSub(t.O),SimpleSocketAPI.Debug("ERROR: "+t.E,!0,!0))},Close:function(){SimpleSocketAPI.Debug("CONNECTION LOST"),SimpleSocket.ClientID=null,SimpleSocket.ServerID=null},Hash:function(e){let t=0;for(let o=0;o<e.length;o++){t=(t<<5)-t+e.charCodeAt(o),t&=t}return t}};SimpleSocket.socketLatancy=0,SimpleSocket.CLIENT_ID="ClientID_REPLACE_ake83awi25",SimpleSocket.connect=async function(e){SimpleSocketAPI.IsConnecting=!0,SimpleSocketAPI.ID=e.project_id,SimpleSocketAPI.Token=e.server_token,await SimpleSocketAPI.TryConnection()},SimpleSocketAPI.DefaultConfig=null,SimpleSocket.setDefaultConfig=function(e){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);SimpleSocketAPI.Debug("NEW CONFIG: Config: "+JSON.stringify(e));let t={Default:e};SimpleSocketAPI.SendData("DefaultConfig",t),SimpleSocketAPI.DefaultConfig=t},SimpleSocket.publishEvent=function(e,t,o){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);SimpleSocketAPI.Debug("PUBLISHING: Filter: "+JSON.stringify(e)+" | Data: "+JSON.stringify(t)+" | Config: "+JSON.stringify(o));let n={Ftr:e,Data:t};null!=o&&(n.Con=o),SimpleSocketAPI.SendData("Publish",n)},SimpleSocket.subscribeEvent=function(e,t,o){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);SimpleSocketAPI.Debug("SUBSCRIBING: Filter: "+JSON.stringify(e)+" | Config: "+JSON.stringify(o));let n={Ftr:e};return null!=o&&(n.Con=o),t.length<2&&(null==o&&(n.Con={}),n.Con.NoConfig=!0),"FUNCTION_SubEvent:"+SimpleSocketAPI.SendData("Subscribe",n,t)},SimpleSocketAPI.Broadcast=function(e){let t=Object.keys(SimpleSocketAPI.Operations);for(let o=0;o<t.length;o++){let n=SimpleSocketAPI.Operations[t[o]];null!=n.Callback&&n.Hash==e.Hash&&n.Callback(e.Data,e.Config)}},SimpleSocket.editSubscribe=function(e,t,o){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);let n={};if(null!=t&&(n.Ftr=t),null!=o&&(n.Con=o),Object.keys(n)<1)return;let l=e.substring(18);if(null==SimpleSocketAPI.Operations[l])return;let S=SimpleSocketAPI.Operations[l].Data,i=null,c="";c+=null!=t?JSON.stringify(t):JSON.stringify(S.Ftr),c+=null!=o?JSON.stringify(o):JSON.stringify(S.Con),i=SimpleSocketAPI.Hash(c),i!=SimpleSocketAPI.Operations[l].Hash&&(n.PrevHash=SimpleSocketAPI.Operations[l].Hash,null!=t&&(SimpleSocketAPI.Operations[l].Data.Ftr=t,SimpleSocketAPI.Operations[l].Hash=i),null!=o&&(SimpleSocketAPI.Operations[l].Data.Con=o),SimpleSocketAPI.Debug("EDITING SUB: Function: "+e+" | New Filter: "+JSON.stringify(t)+" | New Config: "+JSON.stringify(o)),null!=SimpleSocket.ClientID&&SimpleSocketAPI.SendData("EditSub",n))},SimpleSocket.closeSubscribe=function(e){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);let t=e.substring(18);null!=SimpleSocketAPI.Operations[t]&&(SimpleSocketAPI.Debug("CLOSING SUBSCRIBE: ID: "+e),SimpleSocketAPI.SendData("CloseSub",{Hash:SimpleSocketAPI.Operations[t].Hash}),SimpleSocketAPI.RemoveSub(t))},SimpleSocketAPI.DisconnectEvent=null,SimpleSocket.setDisconnectEvent=function(e,t,o){if(null==SimpleSocketAPI.IsConnecting)return void SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0);SimpleSocketAPI.Debug("Setting Disconnect Event: Filter: "+JSON.stringify(e)+" | Data: "+JSON.stringify(t)+" | Config: "+JSON.stringify(o));let n={Ftr:e,Data:t};null!=o&&(n.Con=o),SimpleSocketAPI.SendData("DisPub",n),null!=e||null==SimpleSocketAPI.DisconnectEvent?SimpleSocketAPI.DisconnectEvent=n:delete SimpleSocketAPI.DisconnectEvent},SimpleSocket.remoteControl=function(e,t,o,n,l){if(null!=SimpleSocketAPI.IsConnecting)if(null!=t)if("Subscribe"==e){let e={Task:"Sub",Func:o,Client:t,Ftr:n};null!=l&&(e.Con=l),SimpleSocketAPI.SendData("Remote",e),SimpleSocketAPI.Debug("[REMOTE] Subscribe: ClientID: "+t)}else"CloseSubscribe"==e&&(SimpleSocketAPI.SendData("Remote",{Task:"CloseSub",Client:t,Func:o}),SimpleSocketAPI.Debug("[REMOTE] Close Subscribe: ClientID: "+t));else SimpleSocketAPI.Debug("ERROR: Must have ClientID.",!0,!0);else SimpleSocketAPI.Debug("ERROR: Must connect WebSocket first, call SimpleSocket.connect({ project_id, client_token });",!0,!0)},SimpleSocket.SimpleSocketAPI=SimpleSocketAPI,module.exports=SimpleSocket;